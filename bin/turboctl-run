#!/usr/bin/env python3

"""This is the main script used to run TurboCtl."""

import os
import sys
import argparse

# The directory of this script (bin).
dirname = os.path.abspath(os.path.dirname(__file__))
# The directory above that (TurboCtl).
superdir = os.path.split(dirname)[0]
# Add the TurboCtl directory to the path if it isn't there already.
if not superdir in sys.path:
    sys.path.append(superdir)
    
import turboctl, test_turboctl

# The argparse module hepls with parsing command line arguments.
# The -h option displays an automatically generated help message.
parser = argparse.ArgumentParser(description='This script runs TurboCtrl')

# TurbCtl can be run in three modes: run tests (-t), run interactively
# (-i) or run a single ommand (no letter).
mode_group = parser.add_mutually_exclusive_group()
mode_group.add_argument('-t', '--test', help='run tests', action='store_true')
mode_group.add_argument('-i', '--interactive', help='run in interactive mode', 
                        action='store_true')

# Regardless of mode, TurboCtl can be run with a virtual pump (-v) 
# or with a real pump (-p and port name). Pump type doesn't matter when
# running tests. 
vpump_group = parser.add_mutually_exclusive_group()
vpump_group.add_argument('-v', '--virtual', help='use a virtual pump',
                         action='store_true')
vpump_group.add_argument('-p', '--port', 
                         help='the address of the serial port device')

# All command line arguments after those defined above are passed to 
# the UI.
parser.add_argument('command', help='the command to be run and its arguments '
                    '(ignored if -i is specified)', nargs='*')

args = parser.parse_args()

# Run tests or run the program.
if args.test:
    test_turboctl.run_tests()
    exit()

# Run in interactive or single-command mode.
if args.interactive:
    UI = turboctl.InteractiveTUI
    ui_args = []
else:
    UI = turboctl.ShellTUI
    ui_args = [' '.join(args.command)]

# Run with a virtual or a real pump.
if args.virtual:
    with turboctl.VirtualPump() as vp:
        ui = UI(vp.port)
        ui.run(*ui_args)
else:
    ui = UI(args.port)
    ui.run(*ui_args)